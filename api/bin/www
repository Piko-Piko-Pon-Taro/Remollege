#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.API_PORT || process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * WebSocket
 */
// FIXME: すまん荒技。app.jsにも同様の記述あるのでまとめてくれ…
if (process.env.NODE_ENV === "production") {
  client_url = "https://pikopikopon1.uc.r.appspot.com";
} else if (process.env.NODE_ENV === "development_in_docker") {
  client_url = "http://client:3001";
} else {
  client_url = "http://localhost:3001";
}
const models = require(global.models);
const User = models.User;
const TableUser = models.TableUser;
const io = require('socket.io')(server, {
  origins: [client_url]
});
io.on('connection', socket => {

  socket.on('enter', async ({ roomId, userId }, cb) => {
    await socket.join(`room-${roomId}`);
    await TableUser.destroy({ where: { userId }, force: true });
    cb();
  });

  socket.on('sitDown', async ({ roomId, tableId, userId }) => {
    socket.join(`table-${tableId}`);
    const tableUser = await TableUser.create({ tableId, userId });
    const user = await User.findByPk(tableUser.userId);
    io.to(`room-${roomId}`).emit('someOneSitsDown', { roomId, tableId, user });
  });

  socket.on('sendChat', ({ tableId, chat }) => {
    io.to(`table-${tableId}`).emit('someOneSendChat', { chat });
  })

  socket.on('standUp', async ({ roomId, tableId, userId }) => {
    io.to(`room-${roomId}`).emit('someOneStandsUp', { roomId, tableId, userId });
    await TableUser.destroy({ where: { userId }, force: true });
    socket.leave(`table-${tableId}`);
  });

  socket.on('disconnecting', () => {});

  socket.on('disconnect', (reason) => {
    if (reason === 'io server disconnect') {
      // ここだけ手動でreconnectしないといけないらしいので対応
      socket.connect();
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
