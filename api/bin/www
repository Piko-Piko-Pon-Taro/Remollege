#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.API_PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * WebSocket // TODO:
 */
// const models = require(global.models);
// const User = models.User;
// var io = require('socket.io')(server);
// const m = (name, text, id) => ({ name, text, id });
// io.on('connection', socket => {
//   socket.on('addUser', (data, cb) => {
//     if (!data.name || !data.room) {
//       return cb('incorrect data')
//     }

//     socket.join(data.room)

//     users.remove(socket.id)
//     users.add({
//       id: socket.id,
//       name: data.name,
//       room: data.room
//     })

//     cb({ userId: socket.id })
//     io.to(data.room).emit('updateUsers', users.getByRoom(data.room))

//     socket.emit('newMessage', m('admin', `Wellcome in our room ${data.name}`))
//     socket.broadcast
//       .to(data.room)
//       .emit('newMessage', m('admin', `${data.name} joined to room`))
//   })

//   socket.on('createMessage', (data, cb) => {
//     if (!data.text) {
//       return cb('Can not send without text!')
//     }
//     const user = users.get(data.id)
//     if (user) {
//       io.to(user.room).emit('newMessage', m(user.name, data.text, data.id))
//     }
//     cb()
//   })

//   socket.on('userLeft', (id, cb) => {
//     const user = users.remove(id)
//     if (user) {
//       io.to(user.room).emit('updateUsers', users.getByRoom(user.room))
//       io.to(user.room).emit('newMessage', m('admin', `${user.name} left room!`))
//     }
//     cb()
//   })

//   socket.on('disconnect', () => {
//     const user = users.remove(socket.id)
//     if (user) {
//       io.to(user.room).emit('updateUsers', users.getByRoom(user.room))
//       io.to(user.room).emit('newMessage', m('admin', `${user.name} left room!`))
//     }
//   })
// });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
